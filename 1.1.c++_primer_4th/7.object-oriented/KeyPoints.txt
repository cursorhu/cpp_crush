1.What's OOP 
    The key idea behind OOP is polymorphism. C++ provide below mechanism to implement it:
    * Inheritance
        Inheritance sharing what is common and specializing only that which is inherently different.
        Members defined by the base class are inherited by its derived classes.
        derived class can do below operations based on base class:
            a) use the member function/data of base class, even without definition them.
            b) define its own member function/data, which base class not have.
            c) redefine (overload) member functions of base class.
         virtual:
            Functions defined as virtual are ones that the base expects its derived classes to redefine.
            Functions that the base class intends its children to inherit are not defined as virtual.
            we can understand virtual function as a protocal, that base class only define the format, and derived class implement it (not inherit it).
        
    * Dynamic Binding
        Think about a case: the base class have a virtual member function that receive reference of class object and call it's virtual member function:
            Base_func(ref_class_obj){ ref_class_obj.member_func }
        Inheritance as we known, the derived class object implements the virtual member_func. 
        when we pass reference of the derived class object to this function, it calls the derived class's member_func.
        If we pass reference of derived class object A, the base member function calls A.member_func
        If we pass reference of derived class object B, the base member function calls B.member_func
        Dynamic Binding rely on virtual function mechanism, the call to member_func will be resolved at run time.
        During compile stage, base class's virtual function is only a declaration but no definition.
        
        dynamic binding trigger condition: 
        ONLY when a virtual function is called through a reference or pointer of a base class. 
        
        Dynamic Binding is core implementation of C++ OOP.
        Note that only using pointers or references of a object can support Dynamic Binding, not objects !


2.Key Concept: Class Design and Protected Members
        *In the absence of inheritance, a class has two kinds of users: members of the class itself and the users of that class. 
        This separation between kinds of users is reflected in the division of the class into private and public access levels. 
        Users may access only the public interface; class members and friends may access both the public and private members.
        
        *Under inheritance, there is now a third kind of user of a class: derived class
        The data and function members in a protected section of a class remain inaccessible to the general program, 
        yet are accessible to the derived class. Anything placed within a private section of the base class is accessible 
        only to the class itself and its friends. The private members are not accessible to the derived classes.
        
        *A class designed to be inherited from must decide which parts of the implementation to declare as protected and 
        which should be private. A member should be made private if we wish to prevent subsequently derived classes from 
        having access to that member. A member should be made protected if it provides an operation or data that a derived class 
        will need to use in its implementation. In other words, the interface to the derived type is the combination of both the 
        protected and public members.

3.Derived class
        3.1 definition
            class <classname>: <access-label> <base-class>
            <classname> is derived class, <access-label> is one of public, protected, or private, and <base-class> is a defined class
            When we want to inherit the interface of a base class, then the <access-label> should be 'public'

        3.2 virtual function
            virtual function in the derived class must exactly match the way the function is defined in the base class.
            Except one case: return a reference (or pointer) to a a class object
            example: base class's virtual function return a reference of itself: base_class &
                     derived class can return either base_class & or derived_class &. 
            When a derived class redefines a virtual, it may use the virtual keyword, but it is not required to do so

        3.3 a derived class object contains all data members of base class object. It's a "extention" of base class
            Each derived object has a base-class part, derived classes may access the public and protected members of 
            its base class as if those members were members of the derived class itself. 
            note that the private member of base class is non-accessible for derived object.

        3.4 a derived class can be base class of another derived class
            class Base { /* ... */ };
            class D1: public Base { /* ... */ };
            class D2: public D1 { /* ... */ };
        
        3.5 forward declaration of derived class: 
                // must do declarations of both derived and base class
                class derived_class;
                class base_class;
            below is error for forward declaration:
                class <classname>: <access-label> <base-class>;

4.Inside the polymorphism: the virtual function table
        what exactly virtual function in base class and derived class do to implement Dynamic Binding, to make C++ support polymorphism?
        a base class with virtual function, have an invisible pointer data member, 
        the invisible pointer points to a virtual function list which maintain all virtual function entry address of the base class.
        a derived class also have such an invisible pointer data member, but it point to the virtual function list of derived class.
        the virtual function list is generated by compile.
        so, if we call virtual function from a base class object at runtime, two things happen:
            a) we get the invisible pointer's virtual function list, which contains all virtual function entry address of the base class.
            b) we search the function entry in the virtual function list, then we go to the function entry to execute it.
        if we call virtual function from a derived class object at runtime, two things happen:
            a) we get the invisible pointer's virtual function list, which contains all virtual function entry address of the derived class.
            b) we search the function entry in the virtual function list, then we go to the function entry to execute it.
        In a word, which class object that calls virtual function, decide which virtual function that it really calls.

5.Access control for Inheritance
        A derived class may further restrict but may not loosen the access to the members that it inherits:
        a)In public inheritance, the members of the base retain their access levels: 
          The public members of the base are public members of the derived and the protected members of the base are protected in the derived.
        b)In public inheritance, the members of the base retain their access levels: 
          The public members of the base are public members of the derived and the protected members of the base are protected in the derived.
        c)In private inheritance, all the members of the base class are private in the derived class.

        class inheritance is default private if not use <access-label>:
        class Base { /* ... */ };
        class D : Base { /* ... */ };    // private inheritance by default

6. Key Concept: Inheritance versus Composition
    Is A: When we define one class as publicly inherited from another, the derived class should reflect a so-called "Is A" relationship to the base class.
    Has A: "Has A" relationship imply membership. For example, bookstore classes "has a" a price and an ISBN.  

7. Inheritance and Friendship
    Friends may access the class' private and protected data
    Friendship is not inherited. Friends of the base have no special access to members of its derived classes.
    we can understand it like this: a friend of father, is not a friend of son. 
    father's friend can share the private things of father, but cannot share son's private things
    
8. Inheritance and static
    static member is default global accessible. we can understand that it's not belongs to a class even if defined in it.
    If a base class defines a static member, there is only one such member defined for the entire hierarchy

9. Inheritance Conversions
    8.1 Derived-to-Base Conversions
        A derived object "is a" base class object, because it contain all members of base class object.
        If we have an object of a derived type, we can use its address to assign or initialize a pointer to the base type.
        Similarly, we can use a reference or object of the derived type to initialize a reference to the base type.

        a) if pass an object of derived type to a function expecting a reference to base, doesn't change the derived-type object. It remains a derived-type object.
        b) if pass an object of derived type to a function expecting a base-type object, the base-class portion of that derived object is copied into the input parameter 

        In another word, in cases that request referrence or pointer of base object,
        we can always use referrence or pointer of a derived object, the derived object keeps what it is, without copy operation
        But if we use a derived object but not referrence/pointer, it's "copied and transfered" to a base object.

10. Inheritance & Copy Control Constructors
        Constructors and the copy-control members(Rule of three: copy constructor, assignment operator, destructor) are not inherited !
        Derived constructors are affected by the fact that they inherit from another class: 
            Each derived constructor initializes its base class in addition to initializing its own data members.
        A class may initialize only its own immediate base class. An immediate base class is the class named in the derivation list.
        If class C is derived from class B, which is derived from class A, then B is the immediate base of C. 
        the constructors for C may not initialize the A part directly.

        Defining a Derived Copy Constructor:
            a) If a derived class explicitly defines its own copy constructor or assignment operator, that definition completely overrides 
            the defaults. The copy constructor and assignment operator for inherited classes are responsible for copying or assigning
            their base-class components as well as the members in the class itself.
            b) If a derived class defines its own copy constructor, that copy constructor usually should explicitly use the base-class 
            copy constructor to initialize the base part of the object.

11. Class Scope under Inheritance
        Why derived class object can use base class's function memeber in a public inherit ?
        * Each class maintains its own scope
        * Under inheritance, the scope of the derived class is nested within the scope of its base classes. If a name is unresolved 
        within the scope of the derived class, the enclosing base-class scope(s) are searched for a definition of that name.
        * In another word, the derived object "include" the base object, this is the why.
        * Exampe: 
        base class have function member: book(); 
        derived class call the functioin by: 
            Bulk_item bulk;
            bulk.book();
        Compiler do below to "bind" function member with derived object:
        a)bulk is an object of the Bulk_item class. The Bulk_item class is searched for book. That name is not found.
        b)Because Bulk_item is derived from Item_Base, the Item_Base class is searched next. The name book is found 
        in the Item_base class. The reference is resolved successfully.

12. Key Concept: Name Lookup and Inheritance 
        Understanding how function calls are resolved is crucial to understanding inheritance hierarchies in C++. 
        The following four steps are followed:
        1.  Start by determining the static type of the object, reference, or pointer through which the function is called.
        2.  Look for the function in that class. If it is not found, look in the immediate base class and continue up the chain of 
        classes until either the function is found or the last class is searched. If the name is not found in the class or 
        its enclosing base classes, then the call is in error.
        3.  Once the name is found, do normal type-checking (Section 7.1.2, p. 229) to see if this call is legal given the 
        definition that was found.
        4.  Assuming the call is legal, the compiler generates code. If the function is virtual and the call is through a reference 
        or pointer, then the compiler generates code to determine which version to run based on the dynamic type of the object. 
        Otherwise, the compiler generates code to call the function directly.
 
13. Pure virtual function & abstract class
        refer to comment in 7.2 / pure-virtual.cc

14. Handle class   
        The handle class stores and manages a pointer to the base class. 
        The type of the object to which that pointer points will vary; it can point at either a base or a derived-type object.
        refer to comment in 7.3 handle_class