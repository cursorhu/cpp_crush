Lambda 表达式使函数可以像普通变量一样 定义，赋值，使用
函数对象包装器：std::function 和 std::bind  就是对 Lambda 函数对象 的进一步安全性封装

C++11 std::function 是一种通用、多态的函数封装， 
它的实例可以对任何可以调用的目标实体进行存储、复制和调用操作，
它也是对 C++中现有的可调用实体的一种类型安全的包裹（相对来说，函数指针的调用不是类型安全的），即函数的容器。
当我们有了函数的容器之后便能够更加方便的将函数、函数指针作为对象进行处理

C++11 std::bind 用来绑定一个函数对象和其调用的参数，返回一个新的可调用函数对象
可以预先把指定可调用实体的某些参数绑定到已有的变量，产生一个新的可调用实体，这种机制在回调函数的使用中颇为有用
bind 实际上是一种延迟计算的思想，将可调用对象保存起来，在需要的时候再调用

std::placeholders::_i 是配合 bind 使用的占位参数

注意 bind 的传参方式：
    
    bind 对于预先绑定的参数，是pass-by-value的
    对于不事先绑定的参数，需要传std::placeholders，是pass-by-reference的   
    bind的返回值是可调用实体，可以直接赋给std::function对象

注意示例代码使用 auto 关键字用于函数对象返回值