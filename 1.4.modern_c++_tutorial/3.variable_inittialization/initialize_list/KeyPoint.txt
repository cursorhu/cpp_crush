    初始化是一个非常重要的语言特性，最常见的就是在对象进行初始化时进行使用。 
    在传统 C++ 中，不同的对象有着不同的初始化方法，例如普通数组等 POD 类型（Plain Old Data，即没有构造、析构和虚函数的类或结构体） 
都可以使用 {} 进行初始化，也就是我们所说的初始化列表。 
    对于类对象的初始化，要么需要通过拷贝构造、要么就需要使用 () 进行。 
    这些不同方法都针对各自对象，不能通用。例如C++ 98的初始化：

#include <iostream>
#include <vector>
class Foo {
public:
    int value_a;
    int value_b;
    Foo(int a, int b) : value_a(a), value_b(b) {}
};
int main() {
    // before C++11
    int arr[3] = {1, 2, 3};
    Foo foo(1, 2);
    std::vector<int> vec = {1, 2, 3, 4, 5};
    std::cout << "arr[0]: " << arr[0] << std::endl;
    std::cout << "foo:" << foo.value_a << ", " << foo.value_b << std::endl;
    for (std::vector<int>::iterator it = vec.begin(); it != vec.end(); ++it) {
        std::cout << *it << std::endl;
    }
    return 0;
}

    C++11 首先把初始化列表的概念绑定到了类型上，并将其称之为 std::initializer_list，
允许构造函数或其他函数像参数一样使用初始化列表，这就为类对象的初始化与普通数组和 POD 的初始化方法提供了统一的接口